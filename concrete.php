<?phprequire_once('abstract.php');class DB_Concrete extends DB_Abstract  {    protected $_table = 'user';    protected $_errors = array();    public function __construct($host, $username, $password, $databaseName)    {       $link = mysql_connect( $host, $username, $password );      if ( ! $link ) {          $this->setError("Couldn't connect to database server");       return false;      }       if ( ! mysql_select_db( $databaseName, $link ) ) {           $this->setError("Couldn't select database: $db");        return false;      }      $this->_link = $link;      return true;    }    public function __destruct()    {        mysql_close($this->_link);    }     public function select($query)    {        return $this->toArray(mysql_query($query));    }    public function query($query)    {        return mysql_query($query);    }    public function toArray()    {    	$res = $this->query('SELECT * FROM  $this->_table');        $arr = array();        while ($row = mysql_fetch_array($res)) {            $temp = array();            foreach ($row as $key => $val) {                if (is_string($key)) {                    $temp[$key] = $val;                }            }            array_push($arr, $temp);        }        return $arr;    }   public function save()    {        if (empty($this->_condition)) {            $add_array = $this->_quote_vals($this->_data);            $keys = "(" . implode(array_keys($add_array), ", ") . ")";            $values = "values (" . implode(array_values($add_array), ", ") . ")";            $query = "INSERT INTO $this->_table $keys $values";             return $this->setQuery($query);        } else {            $this->update($this->_condition);        }    }    public function delete()    {        $query = "DELETE FROM $this->_table";        $query .= $this->_makeWhereList($this->_condition);                return $this->setQuery($query);    }    public function setFromArray(Array $data)    {        return $this->_data = $data;    }    public function getError( ) {             return $this->_errors[count($this->_errors)-1];    }    public function setError( $str ) {            array_push( $this->_errors, $str );   }    public function _query( $query ) {             if ( ! $this->_link ) {                   $this->setError("No active db connection");        return false;     	}      $result = mysql_query( $query, $this->_link );      if ( ! $result )                 $this->setError("error: ".mysql_error());      return $result;    }    public function setQuery( $query ) {               if (! $result = $this->_query( $query ) )                   return false;      return mysql_affected_rows( $this->_link );    }        public function debug( $msg ) {           if ( $this->_debug )                   print "$msg<br>";   }    public function _makeWhereList( $condition ) {            if ( empty( $condition ) )                   return "";     $retstr = " WHERE ";     if ( is_array( $condition ) ) {                   $cond_pairs=array();       foreach( $condition as $field=>$val )                       array_push( $cond_pairs, "$field=".$this->_quote_val( $val ) );       $retstr .= implode( " and ", $cond_pairs );     } elseif ( is_string( $condition ) && ! empty( $condition ) )                 $retstr .= $condition;     return $retstr;   }    public  function _quote_val( $val ) {            if ( is_numeric( $val ) )                   return $val;     return "'".addslashes($val)."'";   }    public function _quote_vals( $array ) {	    if(is_array($array)){            foreach( $array as $key=>$val )                  $ret[$key]=$this->_quote_val( $val );     return $ret;	    }else{		    return false;	    }   }}